name: Raconf2025-DevSecOps-Pipeline

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-and-syft:
    name: Build & SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t juice-shop:${{ github.sha }} .

      - name: Syft SBOM Scan
        uses: anchore/sbom-action@v0
        with:
          image: "juice-shop:${{ github.sha }}"
          output-file: "sbom.spdx.json"
          format: "spdx-json"

  # 2) SAST (Semgrep) Job
  Sast-scan:
    name: SAST (Semgrep)
    needs: build-and-syft
    runs-on: ubuntu-latest
    container: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Semgrep Scan
        run: |
         mkdir -p semgrep/results
         semgrep ci --config=auto --sarif --output=semgrep/results/semgrep.sarif || true

      - name: Upload SARIF File
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'semgrep/results/semgrep.sarif'
          
      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep/results/

  # 3) Gitleaks-scan Job
  Gitleaks-scan:
    name: Gitleaks (Secret)
    needs: Sast-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SecretScan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_ENABLE_SUMMARY: true
        continue-on-error: true

      - name: Upload
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'results.sarif'

      - name: Upload gitleaks report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: results.sarif
          path: .

  # 5) Deploy Job (Dummy)
  deploy:
    name: Deploy App Production
    needs:  Gitleaks-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Dummy Deploy Step
        run: echo "Deploying app... (This is a dummy step)"
 
  # 6) ZAP Scan Job
  zap_scan:
      name: ZAP (DAST)
      needs: deploy
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create ZAP output directory
        run: |
         mkdir -p zap-output
         chmod 777 zap-output

      - name: Run ZAP Baseline Scan (with XML report)
        run: |
         docker run --rm \
          -v ${{ github.workspace }}/zap-output:/zap/wrk/:rw \
          ictu/zap2docker-weekly zap-baseline.py \
          -t https://example.com \
          -x zap-report.xml \
          -I 
      
   
      - name: Upload ZAP XML report as artifact
        uses: actions/upload-artifact@v4
        with:
           name: zap-xml-report
           path: zap-output/zap-report.xml



  import-defectdojo:
    name: Import Scans to DefectDojo
    needs: zap_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Download Semgrep Artifact
        uses: actions/download-artifact@v4
        with:
          name: semgrep-results

      - name: Download Gitleaks Artifact
        uses: actions/download-artifact@v4
        with:
          name: results.sarif

      - name: Download Zap Scan Artifact
        uses: actions/download-artifact@v4
        with:
          name: zap-xml-report

      - name: Import Semgrep SARIF to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
        run: |
         pip install requests
         python dojoscript.py semgrep.sarif

      - name: Import GitLeaks SARIF to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
        run: python dojoscript.py results.sarif

      - name: Import GitLeaks SARIF to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
        run: python dojoscript.py zap-report.xml
